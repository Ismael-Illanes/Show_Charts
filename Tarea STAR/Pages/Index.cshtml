@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
@using System.Globalization;
@using Tarea_STAR.Helpers;
<link rel="stylesheet" href="~/css/index.css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>





<form method="post" id="myForm" asp-page-handler="Index">


    <div id="CIndex">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }


        <div id="datePickerSection">
            <div id="datePickerSectionInitial">


                <div class="datePickerSectionInitial_input">
                    <div class="dateInfo">
                        <label for="initDay"><h4>Fecha inicio</h4></label>
                        <input type="date" autocomplete="off" placeholder="dd/MM/yyyy" name="DiaInicio" id="initDay" asp-for="@Model.DiaInicio" value="@Model.DiaInicio" />
                    </div>
                    <div class="dateInfo">
                        <label for="finalDay"><h4>Fecha final</h4></label>
                        <input type="date" autocomplete="off" placeholder="dd/MM/yyyy" name="DiaFinal" id="finalDay" asp-for="@Model.DiaFinal" value="@Model.DiaFinal" />
                        <br />
                    </div>

                </div>
            </div>
            <div id="datePickerSectionFinal">

                <div class="datePickerSectionInitial_input">
                    <div class="dateInfo">
                        <label for="initHour"><h4>Hora inicio</h4></label>
                        <input type="time" autocomplete="off" placeholder="HH:mm" name="HoraInicio" asp-for="@Model.HoraInicio" id="initHour" />
                    </div>
                    <div class="dateInfo">
                        <label for="finalHour"><h4>Hora final</h4></label>
                        <input type="time" autocomplete="off" placeholder="HH:mm" name="HoraFinal" asp-for="@Model.HoraFinal" id="finalHour" />
                    </div>
                </div>
            </div>
        </div>

        <div class="selectionBox">
            <h4>Agrupar por:</h4>
            <div class="selectionBox_options">
                <div class="selectionBox_options_input">
                    <input type="radio" id="group1" name="GroupBy" value="dw" @(Model.GroupBy == "dw" ? "checked" : "")>
                    <label for="group1">Días semana</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="radio" id="group2" name="GroupBy" value="w" @(Model.GroupBy == "w" ? "checked" : "")>
                    <label for="group2">Semanas</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="radio" id="group3" name="GroupBy" value="m" @(Model.GroupBy == "m" ? "checked" : "")>
                    <label for="group3">Meses</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="radio" id="group4" name="GroupBy" value="y" @(Model.GroupBy == "y" ? "checked" : "")>
                    <label for="group4">Años</label><br>
                </div>


            </div>
        </div>
        <div class="selectionBox">
            <h4>Día a analizar:</h4>
            <div class="selectionBox_options">
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="all" id="all" @(Model.SelectedDays != null && Model.SelectedDays.Contains("all") ? "checked" : "")>
                    <label for="all">Todos</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="1" id="day1" @(Model.SelectedDays != null && Model.SelectedDays.Contains("1") ? "checked" : "")>
                    <label for="day1">Lunes</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="2" id="day2" @(Model.SelectedDays != null && Model.SelectedDays.Contains("2") ? "checked" : "")>
                    <label for="day2">Martes</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="3" id="day3" @(Model.SelectedDays != null && Model.SelectedDays.Contains("3") ? "checked" : "")>
                    <label for="day3">Miércoles</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="4" id="day4" @(Model.SelectedDays != null && Model.SelectedDays.Contains("4") ? "checked" : "")>
                    <label for="day4">Jueves</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="5" id="day5" @(Model.SelectedDays != null && Model.SelectedDays.Contains("5") ? "checked" : "")>
                    <label for="day5">Viernes</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="6" id="day6" @(Model.SelectedDays != null && Model.SelectedDays.Contains("6") ? "checked" : "")>
                    <label for="day6">Sábado</label><br>
                </div>
                <div class="selectionBox_options_input">
                    <input type="checkbox" name="SelectedDays" class="checker" value="0" id="day0" @(Model.SelectedDays != null && Model.SelectedDays.Contains("0") ? "checked" : "")>
                    <label for="day0">Domingo</label><br>
                </div>


            </div>
        </div>
        <button id="btnChart" type="submit">Mostrar gráficos</button>
</form>


@if(Model.Ventas != null)
{
    decimal importeTotalTotal = (decimal)Model.ListaVentasPorDia.SelectMany(dia => dia).Sum(venta => venta.Importe);
    <h2>Importe total de lo filtrado: @importeTotalTotal</h2>
}

<div id="Charts">

        @if (Model.GroupBy == "dw")
        {
            int chartsAmount = Model.ListaVentasPorDia.Count();
            string[] arr = new string[chartsAmount];

            for (var i = 0; i < chartsAmount; i++)
            {
                string c = "ChartDay" + i;
                arr[i] = c;
            }
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

            for (var i = 0; i < chartsAmount; i++)
            {
                <canvas id='@arr[i]'></canvas>
                <script>
                    document.getElementById("Charts").style.display = "grid";
                    var ventasPorDia = @Html.Raw(Json.Serialize(Model.ListaVentasPorDia[i].Select(item => item.Importe)));
                    var labels = @Html.Raw(Json.Serialize(Model.ListaVentasPorDia[i].Select(item => item.Fecha)));
                    var dayNames = @Html.Raw(Json.Serialize(Model.ListaVentasPorDia[i].Select(item => CultureInfo.GetCultureInfo("es-ES").DateTimeFormat.GetDayName(item.DayOfWeek))));

                    var maxIndex = ventasPorDia.indexOf(Math.max(...ventasPorDia));
                    var minIndex = ventasPorDia.indexOf(Math.min(...ventasPorDia));

                    var importeTotal = ventasPorDia.reduce((a, b) => a + b, 0);

                    new Chart(@arr[i], {
                    type: 'bar',
                    data: {
                    labels: labels ,
                    datasets: [{
                    label: dayNames[0] + " - Total: " + importeTotal.toFixed(2) + " €",
                    data: ventasPorDia,
                    backgroundColor: ventasPorDia.map((value, index) => index === maxIndex ? 'MediumSeaGreen' : index === minIndex ? 'lightcoral' : 'CornflowerBlue'),
                    borderWidth: 1
                    }]
                    },
                    options: {
                    scales: {
                    y: {
                    beginAtZero: true,
                    callback: function (value, index, values) {
                    return value.toFixed(2) + " €";
                    }
                    }
                    },
                    plugins: {
                    legend: {
                    labels: {
                    boxWidth: 0,
                    font: {
                    size: 30
                    }
                    },
                    display: true,
                    title: {
                    text: "Legend",
                    color: 'red'
                    },
                    onClick: (e) => e.stopPropagation()
                    },
                    tooltip: {
                    callbacks: {
                    label: function (context) {
                    var value = context.dataset.data[context.dataIndex];
                    return value.toFixed(2) + " €";
                    }
                    }
                    }
                    }
                    }
                    });
                </script>
            }
        }
        else if (Model.GroupBy == "w")
        {
            int chartsAmount = Model.ListaVentasPorSemana.Count();
            string[] arr = new string[chartsAmount];

            for (var i = 0; i < chartsAmount; i++)
            {
                string c = "ChartWeek" + i;
                arr[i] = c;
            }

            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

            @for (var i = 0; i < chartsAmount; i++)
            {
                <canvas id='@arr[i]'></canvas>
                <script>
                    document.getElementById("Charts").style.display = "grid";
                    var ventasPorSemana = @Html.Raw(Json.Serialize(Model.ListaVentasPorSemana[i].Select(item => item.Importe)));
                    var labels = @Html.Raw(Json.Serialize(Model.ListaVentasPorSemana[i].Select(item => item.Fecha.ToString() + " - " + CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(Convert.ToDateTime(item.Fecha).DayOfWeek))));



                    var weekNumber = @Html.Raw(Json.Serialize(Model.ListaVentasPorSemana[i].Select(item => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(Convert.ToDateTime(item.Fecha), CalendarWeekRule.FirstDay, DayOfWeek.Monday))));

                    var year = @Html.Raw(Json.Serialize(Model.ListaVentasPorSemana[i].Select(item => item.Year)));

                    var maxIndex = ventasPorSemana.indexOf(Math.max(...ventasPorSemana));
                    var minIndex = ventasPorSemana.indexOf(Math.min(...ventasPorSemana));

                    var importeTotal = ventasPorSemana.reduce((a, b) => a + b, 0);

                    new Chart('@arr[i]', {
                    type: 'bar',
                    data: {
                    labels: labels,
                    datasets: [{
                    label: "Semana nº " + weekNumber[0] + " (" + year[0]  + ")" + " - Total: " + importeTotal.toFixed(2) + " €",
                    data: ventasPorSemana,
                    backgroundColor: ventasPorSemana.map((value, index) => index === maxIndex ? 'MediumSeaGreen' : index === minIndex ? 'lightcoral' : 'CornflowerBlue'),
                    borderWidth: 1
                    }]
                    },
                    options: {
                    scales: {
                    y: {
                    beginAtZero: true,
                    callback: function (value, index, values) {
                    return value.toFixed(2) + " €";
                    }
                    }
                    },
                    plugins: {
                    legend: {
                    labels: {
                    boxWidth: 0,
                    font: {
                    size: 15
                    }
                    },
                    display: true,
                    onClick: (e) => e.stopPropagation()
                    },
                    tooltip: {
                    callbacks: {
                    label: function (context) {
                    var value = context.dataset.data[context.dataIndex];
                    return value.toFixed(2) + " €";
                    }
                    }
                    }
                    }
                    }
                    });
                </script>
            }
        }
        else if (Model.GroupBy == "m")
        {
            int chartsAmount = Model.ListaVentasPorMes.Count();
            string[] arr = new string[chartsAmount];

            for (var i = 0; i < chartsAmount; i++)
            {
                string c = "ChartMonth" + i;
                arr[i] = c;
            }

            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

            @for (var i = 0; i < chartsAmount; i++)
            {
                <canvas id='@arr[i]'></canvas>
                <script>
                    document.getElementById("Charts").style.display = "grid";

                    var ventasPorMes = @Html.Raw(Json.Serialize(Model.ListaVentasPorMes[i].Select(item => item.Importe)));
                    var semanas = @Html.Raw(Json.Serialize(Model.ListaVentasPorMes[i].Select(item => item.Semana)));
                    var month = @Html.Raw(Json.Serialize(Model.ListaVentasPorMes[i].Select(item => item.Mes)));
                    var year = @Html.Raw(Json.Serialize(Model.ListaVentasPorMes[i].Select(item => item.Year)));
                    var importeTotal = ventasPorMes.reduce((a, b) => a + b, 0);
                    var maxIndex = ventasPorMes.indexOf(Math.max(...ventasPorMes));
                    var minIndex = ventasPorMes.indexOf(Math.min(...ventasPorMes));

                    new Chart('@arr[i]', {
                        type: 'bar',
                        data: {
                            labels: semanas,
                            datasets: [{
                                label: "Mes nº " + "(" + month[0] + ")" + " del año " + year[0] + " - Total: " + importeTotal.toFixed(2) + " €",
                                data: ventasPorMes,
                                backgroundColor: ventasPorMes.map((value, index) => index === maxIndex ? 'MediumSeaGreen' : index === minIndex ? 'lightcoral' : 'CornflowerBlue'),
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    callback: function (value, index, values) {
                                        return value.toFixed(2) + " €";
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        boxWidth: 0,
                                        font: {
                                            size: 15
                                        }
                                    },
                                    display: true,
                                    onClick: (e) => e.stopPropagation()
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            var value = context.dataset.data[context.dataIndex];
                                            return value.toFixed(2) + " €";
                                        }
                                    }
                                }
                            }
                        }
                    });
                </script>
            }

        }
        else if(Model.GroupBy == "y")
        {
            int chartsAmount = Model.ListaVentasPorAno.Count();
            string[] arr = new string[chartsAmount];

            for (var i = 0; i < chartsAmount; i++)
            {
                string c = "ChartYear" + i;
                arr[i] = c;
            }
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            @for (var i = 0; i < chartsAmount; i++)
            {
                <canvas id='@arr[i]'></canvas>
                <script>
                    document.getElementById("Charts").style.display = "grid";
                    var meses = @Html.Raw(Json.Serialize(Model.ListaVentasPorAno[i].Select(item => item.Mes)));

                    var nombresMeses = meses.map(function (mes) {
                        var fecha = new Date(2000, mes - 1, 1); 
                        var nombreMes = fecha.toLocaleString('es', { month: 'long' }); 
                        return nombreMes;
                    });


                    var ventasPorAno = @Html.Raw(Json.Serialize(Model.ListaVentasPorAno[i].Select(item => item.Importe)));
                    var year = @Html.Raw(Json.Serialize(Model.ListaVentasPorAno[i].Select(item => item.Year)))
                    var importeTotal = ventasPorAno.reduce((a, b) => a + b, 0);
                    var maxIndex = ventasPorAno.indexOf(Math.max(...ventasPorAno));
                    var minIndex = ventasPorAno.indexOf(Math.min(...ventasPorAno));

                    new Chart('@arr[i]', {
                        type: 'bar',
                        data: {
                            labels: nombresMeses,
                            datasets: [{
                                label: "Año " + year[0]  + " - Total recaudado: " + importeTotal.toFixed(2) + " €",
                                data: ventasPorAno,
                                backgroundColor: ventasPorAno.map((value, index) => index === maxIndex ? 'MediumSeaGreen' : index === minIndex ? 'lightcoral' : 'CornflowerBlue'),
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    callback: function (value, index, values) {
                                        return value.toFixed(2) + " €";
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        boxWidth: 0,
                                        font: {
                                            size: 15
                                        }
                                    },
                                    display: true,
                                    onClick: (e) => e.stopPropagation()
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            var value = context.dataset.data[context.dataIndex];
                                            return value.toFixed(2) + " €";
                                        }
                                    }
                                }
                            }
                        }
                    });
                </script>
            }
        }
</div>

@*<div id="progress">
    <span id="progress-value">
        <span class="material-symbols-outlined">
            arrow_upward
        </span>
    </span>
</div>

*@




